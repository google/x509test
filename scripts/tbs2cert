#!/usr/bin/env python2.7
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''Build an X.509 Certificate from a TBSCertificate.

Usage: tbs2cert tbscert.ascii privkey.pem
'''

from __future__ import print_function
import sys
import os
import os.path
import re
import getopt
import tempfile
import random
from datetime import datetime, timedelta

_OPENSSL_OPTS = {
    "sha256WithRSAEncryption": "-sha256",
    "dsa-with-sha1": "-sha1",
}
_INCLUDE_RE = re.compile(r'\s*#include\s+<(?P<filename>[^>]+)>\s*')
_OID_RE = re.compile(r'^\s*OBJECT_IDENTIFIER\s+\{\s+(?P<oid>[0-9.]+)\s+\}\s*(#.*)?$')

def _name_for_opt(opt):
    for n, o in _OPENSSL_OPTS.items():
        if o == opt:
            return n
    return None


def _oid_for_opt(opt):
    name = _name_for_opt(opt)
    if name is None:
        return None
    for o, n in _OID_NAMES.items():
        if n == name:
            return o
    return None


_OID_BYTES = (
    # Named curves.
    ([0x2b, 0x81, 0x04, 0x00, 0x21], "secp224r1"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07], "secp256r1"),
    ([0x2b, 0x81, 0x04, 0x00, 0x22], "secp384r1"),
    ([0x2b, 0x81, 0x04, 0x00, 0x23], "secp521r1"),
    # Specified curve encodings.
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01], "prime-field"),
    # Hash algorithms.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x02], "md2"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x04], "md4"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05], "md5"),
    ([0x2b, 0x0e, 0x03, 0x02, 0x1a], "sha1"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04], "sha224"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01], "sha256"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02], "sha384"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03], "sha512"),
    # X.509 SubjectPublicKeyInfo types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01], "rsaEncryption"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01], "ecPublicKey"),
    ([0x2a, 0x86, 0x48, 0xce, 0x38, 0x04, 0x01], "dsa"),
    # X.509 signature algorithm types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x02], "md2WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x03], "md4WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x04], "md5WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05], "sha1WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0e], "sha224WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b], "sha256WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c], "sha384WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0d], "sha512WithRSAEncryption"),
    ([0x2a, 0x86, 0x48, 0xce, 0x38, 0x04, 0x03], "dsa-with-sha1"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x01], "dsa-with-sha224"),
    ([0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x02], "dsa-with-sha256"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x01], "ecdsa-with-SHA1"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x01], "ecdsa-with-SHA224"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02], "ecdsa-with-SHA256"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03], "ecdsa-with-SHA384"),
    ([0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x04], "ecdsa-with-SHA512"),
    # X.509 extensions.
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01], "authorityInfoAccess"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x0b], "subjectInfoAccess"),
    ([0x55, 0x1d, 0x09], "subjectDirectoryAttributes"),
    ([0x55, 0x1d, 0x0e], "subjectKeyIdentifier"),
    ([0x55, 0x1d, 0x0f], "keyUsage"),
    ([0x55, 0x1d, 0x10], "privateKeyUsagePeriod"),
    ([0x55, 0x1d, 0x11], "subjectAltName"),
    ([0x55, 0x1d, 0x12], "issuerAltName"),
    ([0x55, 0x1d, 0x13], "basicConstraints"),
    ([0x55, 0x1d, 0x14], "cRLNumber"),
    ([0x55, 0x1d, 0x15], "reasonCode"),
    ([0x55, 0x1d, 0x17], "instructionCode"),
    ([0x55, 0x1d, 0x18], "invalidityDate"),
    ([0x55, 0x1d, 0x1b], "deltaCRLIndicator"),
    ([0x55, 0x1d, 0x1c], "issuingDistributionPoint"),
    ([0x55, 0x1d, 0x1d], "certificateIssuer"),
    ([0x55, 0x1d, 0x1e], "nameConstraints"),
    ([0x55, 0x1d, 0x1f], "cRLDistributionPoints"),
    ([0x55, 0x1d, 0x20], "certificatePolicies"),
    ([0x55, 0x1d, 0x21], "policyMappings"),
    ([0x55, 0x1d, 0x23], "authorityKeyIdentifier"),
    ([0x55, 0x1d, 0x24], "policyConstraints"),
    ([0x55, 0x1d, 0x25], "extKeyUsage"),
    ([0x55, 0x1d, 0x2e], "freshestCRL"),
    ([0x55, 0x1d, 0x36], "inhibitAnyPolicy"),
    # X.509 extended key usages.
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01], "serverAuth"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02], "clientAuth"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03], "codeSigning"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x04], "emailProtection"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x08], "timeStamping"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x09], "OCSPSigning"),
    ([0x55, 0x1d, 0x25, 0x00], "anyExtendedKeyUsage"),
    # X.509 policy IDs.
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02], "unotice"),
    ([0x55, 0x1d, 0x20, 0x00], "anyPolicy"),
    ([0x67, 0x81, 0x0c, 0x01, 0x02, 0x01], "domain-validated"),
    ([0x67, 0x81, 0x0c, 0x01, 0x02, 0x02], "organization-validated"),
    ([0x67, 0x81, 0x0c, 0x01, 0x02, 0x03], "individual-validated"),
    # X.509 AccessDescription types.
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01], "ocsp"),
    ([0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02], "caIssuers"),
    # X.520 naming attributes.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01], "emailAddress"),
    ([0x55, 0x04, 0x03], "commonName"),
    ([0x55, 0x04, 0x05], "serialNumber"),
    ([0x55, 0x04, 0x06], "countryName"),
    ([0x55, 0x04, 0x07], "localityName"),
    ([0x55, 0x04, 0x08], "stateOrProvinceName"),
    ([0x55, 0x04, 0x0a], "organizationName"),
    ([0x55, 0x04, 0x0b], "organizationUnitName"),
    ([0x55, 0x04, 0x0c], "title"),
    # PKCS #7 content types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01], "data"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x02], "signedData"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x03], "envelopedData"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x04], "signedAndEnvelopedData"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x05], "digestedData"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x06], "encryptedData"),
    # PKCS #12 bag types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x01], "keyBag"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x02], "pkcs-8ShroudedKeyBag"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x03], "certBag"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x04], "crlBag"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x05], "secretBag"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x06], "safeContentsBag"),
    # PKCS #12 attribute types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x14], "friendlyName"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x15], "localKeyId"),
    # PKCS #12 PBE types.
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x01], "pbeWithSHAAnd128BitRC4"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x02], "pbeWithSHAAnd40BitRC4"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x03], "pbeWithSHAAnd3-KeyTripleDES-CBC"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x04], "pbeWithSHAAnd2-KeyTripleDES-CBC"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x05], "pbeWithSHAAnd128BitRC2-CBC"),
    ([0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x06], "pbewithSHAAnd40BitRC2-CBC"),)


def _oid_frombytes(data):
    if len(data) == 0:
        return ''
    first = data[0]
    result = [(first / 40), (first % 40)]
    value = 0
    for ii in range(1, len(data)):
        b = data[ii]
        value = (value << 7) + (b & 0x7f)
        if not (b & 0x80):
            result.append(value)
            value = 0
    return result


_OID_NAMES = {}
for (data, name) in _OID_BYTES:
    oid = _oid_frombytes(data)
    oidstr = '.'.join([str(v) for v in oid])
    _OID_NAMES[oidstr] = name

def _expand_file(filename, incdir):
    results = []
    with open(filename, "r") as infile:
        for line in infile:
            m = _INCLUDE_RE.match(line)
            if m:
                innerfile = os.path.join(incdir, m.group('filename'))
                innerconts = _expand_file(innerfile, incdir)
                results.extend(innerconts)
            else:
                results.append(line.rstrip())
    return results

def _main(argv):
    verbose = False
    incdir = "."
    privkey = None
    try:
        opts, args = getopt.getopt(argv, "hI:p:v", ("help", "include=", "privkey=", "verbose"))
    except getopt.GetoptError:
        print(__doc__, file=sys.stderr)
        sys.exit(1)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(__doc__, file=sys.stderr)
            sys.exit(1)
        elif opt in ("-v", "--verbose"):
            verbose = True
        elif opt in ("-I", "--include"):
            incdir = arg
        elif opt in ("-p", "--privkey"):
            privkey = arg
        else:
            print("Unknown option %s" % opt, file=sys.stderr)
            print(__doc__, file=sys.stderr)
            sys.exit(1)

    if len(args) != 1:
        print(__doc__, file=sys.stderr)
        sys.exit(1)

    tbscert = args[0]
    if privkey is None:
        raise Exception("Private key for signing required")

    # Hunt the first OID in the certificate, which should be the algorithm.
    oid_raw = None
    oid_name = None
    dgst_opt = "-sha256"
    tbsdata = _expand_file(tbscert, incdir)

    utcnow = datetime.utcnow()
    start = utcnow - timedelta(60)  # 60d ago
    start = start.strftime("%y%m%d%H%M%SZ")
    end = utcnow + timedelta(365*3 - 180)  # Just under ~3 years ahead
    end = end.strftime("%y%m%d%H%M%SZ")
    # Start with octet 01 to ensure serial number is positive and is
    # minimally-encoded (for DER validity).
    serial = '01%014x' % random.randrange(16**14)
    outfd, outname = tempfile.mkstemp(suffix='.tbs')
    outfile = os.fdopen(outfd, 'w')
    lines = []
    for line in tbsdata:
        if oid_raw is None:
            m = _OID_RE.match(line)
            if m:
                oid_raw = m.group('oid')
                oid_name = _OID_NAMES.get(oid_raw, None)
                opt = _OPENSSL_OPTS.get(oid_name, None)
                if opt is not None:
                    if verbose:
                        print('Found algorithm %s (%s) => option %s' %
                              (oid_raw, oid_name, opt), file=sys.stderr)
                    dgst_opt = opt
                else:
                    if verbose:
                        print('Found algorithm %s (%s), unknown digest option' %
                              (oid_raw, oid_name), file=sys.stderr)
        # Replace various @GEN<thing>@ commands
        line = re.sub('@GENSTART@', start, line)
        line = re.sub('@GENEND@', end, line)
        line = re.sub('@GENSERIAL@', serial, line)
        lines.append(line)

    # Send modified TBS to DER for signature.
    for line in lines:
        print(line, file=outfile)
    outfile.close()
    dgst_cmd = 'ascii2der -i %s | openssl dgst %s -sign %s' % (outname, dgst_opt, privkey)
    if verbose:
        print('Invoke: %s' % dgst_cmd, file=sys.stderr)
    sig_bytes = os.popen(dgst_cmd).read()
    os.unlink(outname)
    sig_hex = ''.join(['%02x' % ord(b) for b in sig_bytes])
    # Now output ASCII full certificate
    print('SEQUENCE {')
    for line in lines:
        print('  %s' % line)
    print('  SEQUENCE {')
    dgst_oid = _oid_for_opt(dgst_opt)
    if dgst_oid is None:
        dgst_oid = oid_name
    if verbose:
        print('Add signature with algorithm OID %s' % dgst_oid, file=sys.stderr)
    print('    OBJECT_IDENTIFIER { %s }' % dgst_oid)
    print('    NULL {}')  # algorithm params @@@@
    print('  }')
    print('  BIT_STRING {')
    print('    `00`')
    print('    `%s`' % sig_hex)
    print('  }')
    print('}')

if __name__ == "__main__":
    _main(sys.argv[1:])
